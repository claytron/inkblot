#!/usr/bin/env ruby

require "bundler/setup"
require "inkblot"

# You can add fixtures and/or initialization code here to make experimenting
# with your gem easier. You can also use a different console, if you like.

# (If you use this, don't forget to add pry to your Gemfile!)
require "pry"

include Inkblot # :nodoc:

# Overrides this in development
def Inkblot.vendor_path(*paths)
  @vendor_path ||= String.new(Dir.pwd).tap do |str|
    str << "/vendor"
  end

  return @vendor_path if paths.empty?

  [String.new(@vendor_path)].concat(paths).join('/')
end

### EXAMPLE COMPONENTS

## SimpleText
@t = Components::SimpleText.new do |st|
  st.div_height = st.div_width = 95
  st.text = "56%"
  st.size = 60
  st.border_size = 10
end

## IconMenu with ButtonMenu frame
@b = Components::IconMenu.new do |mn|
  mn.div_height = mn.div_width = :full
  
  mn.icons = :arrows
  
  mn.frame_contents = Components::ButtonMenu.new(
    buttons: ["One", "Two", "Three", "Four"],
    div_height: (Inkblot::Display.size[:height].to_f * 0.95).floor.to_s + "px"
  )
end

# IconMenu with SimpleText Frame
@i = Components::IconMenu.new do |mn|
  mn.div_height = mn.div_width = :full

  mn.frame_contents = Components::SimpleText.new(
    text: "Buttons!",
    size: :large
  )
end

def test_scroll
  # ex_itms = [
  #   :apple,
  #   "Orange",
  #   1,
  #   [:two],
  #   { keys: :values },
  #   0..10,
  #   0+3i,
  #   5.576,
  #   true,
  #   false
  # ]

  ex_itms = (1..10).to_a.map { |x| "Option #{x}" }

  ## ScrollMenu with example items
  @s = Components::ScrollMenu.new do |sc|
    sc.div_height = sc.div_width = :full
    sc.items = ex_itms
  end

  sel_procs = [
    Proc.new { return @s.choice(0) },
    Proc.new { return @s.choice(1) },
    Proc.new { return @s.choice(2) },
    Proc.new { return @s.choice(3) },
  ]

  scr_procs = [
    Proc.new { @s.select },
    Proc.new { throw :cancel },
    Proc.new { @s.prev_page},
    Proc.new { @s.next_page },
  ]

  catch(:cancel) do
    loop do
      Buttons.on_press = @s.mode == :scroll ? scr_procs : sel_procs
      Display[@s]
      Buttons.get_press
    end
  end

  :canceled
end

Pry.start