#!/usr/bin/env ruby

require "bundler/setup"
require "inkblot"

# You can add fixtures and/or initialization code here to make experimenting
# with your gem easier. You can also use a different console, if you like.

# (If you use this, don't forget to add pry to your Gemfile!)
require "pry"

include Inkblot # :nodoc:


# Overrides this in development
def Inkblot.vendor_path(*paths)
  @vendor_path ||= String.new(Dir.pwd).tap do |str|
    str << "/vendor"
  end

  return @vendor_path if paths.empty?

  [String.new(@vendor_path)].concat(paths).join('/')
end

CHRIS_KIM = Inkblot.vendor_path('chris_kim.bmp')

# Exports and sets pulls for pins
if Gem.platforms.last.os == "linux"
  Buttons.init unless Buttons.ready?
end

### EXAMPLE COMPONENTS

## SimpleText
@t = Components::SimpleText.new do |st|
  st.div_height = st.div_width = 95
  st.gfonts = ['Dancing Script', 'Oswald', 'Pacifico', 'Arvo', 'Righteous']
  st.font = st.gfonts.sample
  st.text = "Hello"
  st.size = 60
  st.border_size = 10
end

## QR Code
@q = Components::QrCode.new do |qr|
  qr.fullscreen = true
  # qr.margin_top = qr.margin_left = -5
  qr.message = "https://youtu.be/zt2uIhAvQZ8"
end

## IconPane with a FullScreenImage in the frame
@i = Components::IconPane.new do |ip|
  ip.fullscreen = true
  ip.frame_contents = Components::FullScreenImage.new(path: CHRIS_KIM)
end

## IconGrid with random icons
@g = Components::IconGrid.new do |ig|
  ig.fullscreen = true
  ig.icons = Array.new(4) { Components::Helpers::Icons.codepoints.keys.sample }
end

## IconPane with TableList frame
@b = Components::IconPane.new do |ip|
  ip.fullscreen = true  
  ip.icons = :arrows
  
  ip.frame_contents = Components::TableList.new(
    items: ["Apples", "Oranges", "Pears", "Peaches"],
    div_height: (Inkblot::Display.size[:height].to_f * 0.95).floor.to_s + "px"
  )
end

## ScrollMenu with example items
@s = Components::ScrollMenu.new do |sc|
  sc.fullscreen = true
  sc.items = (1..10).map { |x| "Option #{x}" }
end

# Example button interaction scroll loop
def test_scroll
  Display[@s]

  until @s.concluded?
    Buttons.get_press
    Display.again unless @s.concluded?
  end

  scr = Components::IconPane.new do |pane|
    pane.fullscreen = true
    pane.icons = :cancel
    pane.frame_contents = Components::SimpleText.new do |st|
      st.text = "You picked #{@s.answer}"
      st.size = :large
      st.border_size = 1
    end
  end

  Display[scr]
  Buttons.get_input
  Display.clear
  
  @s.answer
end

Pry.start